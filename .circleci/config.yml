version: 2.1
commands:
  destroy-environment:
    description: Destroy frontend, backend and S3 bucket.
    parameters:
      Workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy frontend, backend and S3 bucket..
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
  revert-migrations:
    description: Revert the latest migration if successfully run.   
    steps:
      - run:
          name: Revert migration
          when: on_fail
          command: |
            SUCCESS=$(curl -k https://kvdb.io/8Z1Ghy8FB75oagM8HasGTX/migration_${CIRCLE_WORKFLOW_ID:0:7})         
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build  

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build   
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm install
            npm run test        
          
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]    
      - run:
          name: Run backend Test
          command: |
            cd backend
            npm install
            npm run test  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]  
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]  
      - run:
          name: Run backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "04:c0:4d:06:83:65:ba:59:07:18:cc:ae:d5:e6:fc:93"
      # attach workspace
      - attach_workspace:
          at: ~/
      # Install dependencies to be able to run ansible-playbook  
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Install AWS CLI
          command: | 
            sudo apt upgrade && sudo apt install
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm cache clean --force
            rm -rf node_modules
            npm i
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/8Z1Ghy8FB75oagM8HasGTX/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations
  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - run:
          name: Install dependencies apt, python3, Node, AWSCLI
          command: |
            sudo apt update
            sudo apt install  
            sudo apt install python3
            python3 --version
            npm install
            node --version
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursiv
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations 
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "04:c0:4d:06:83:65:ba:59:07:18:cc:ae:d5:e6:fc:93" ]
      - attach_workspace:
          at: .    
      - run:
          name: Installing dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: updating env variables
          command: |
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            echo "ENVIRONMENT: production" >> backend/.env      
      - run:
          name: pre-Deploy
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz

      - run:
          name: Deploy backend
          command: |            
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  
                              
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend] 
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations]    
      - deploy-backend:
          requires: [run-migrations]              